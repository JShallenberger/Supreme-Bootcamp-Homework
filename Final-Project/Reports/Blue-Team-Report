### Blue Team: Summary of Operations ###

- Table of Contents

- Network Topology

- Description of Targets

- Monitoring the Targets

- Patterns of Traffic & Behavior

- Suggestions for Going Further

**Network Topology**
The following machines were identified on the network:
Kali
Operating System: Kali GNU/ Linux 2020.1
Purpose: Attack Machine
IP Address: 192.168.1.90
ELK
Operating System: Ubuntu
Purpose: Elasticsearch and Kibana server
IP Address: 192.168.1.100
Target 1
Operating System: Debian GNU/Linux 8
Purpose: WordPress Host
IP Address: 192.168.1.110
Target 2
Operating System: Debian GNU/ Linux 8
Purpose: WordPress Host
IP Address: 192.168.1.115
Capstone
Operating System: Ubuntu
Purpose: Vulnerable Web Server
IP Address: 192.168.1.105
Description of Targets
TODO: Answer the questions below.
The target of this attack was: Target 1 (192.168.1.110).
Target 1 is an Apache web server and has SSH enabled, so ports 80 and 22 are possible ports of entry for attackers. As such, the following alerts have been implemented:
Monitoring the Targets
Traffic to these services should be carefully monitored. To this end, we have implemented the alerts below:
Alert 1 – Excessive HTTP Errors
Alert 1 is implemented as follows: WHEN count() GROUPED OVER top 5 'http.response.status_code' IS ABOVE 400 FOR THE LAST 5 minutes
Metric: WHEN count() GROUPED OVER top 5 ‘http.response.status_code’
Threshold: IS ABOVE 400
Vulnerability Mitigated: Enumeration/Brute force
Reliability: This alert provides high reliability. Measuring error codes that are 400 and above filer out normal and successful responses. 
Alert 2 – HTTP Request Size Monitor
Alert 2 is implemented as follows: WHEN sum() of http.request.byte OVER all documents IS ABOVE 3500 FOR THE LAST 1 minute
Metric: WHEN sum() of http.request.byte OVER all documents
Threshold: IS ABOVE 3500
Vulnerability Mitigated: Code injection in HTTP requests or DDOS attacks.
Reliability: This alert has a tendency of creating false positives, which provides medium reliability. There is possibly a large number of legitimate HTTP requests triggering this alert.
Alert 3 – CPU Usage Monitor
Alert 3 is implemented as follows: WHEN max() OF system.process.cpu.total.pct OVER all documents IS ABOVE 0.5 FOR THE LAST 5 minutes
Metric: WHEN max() OF system.process.cpu.total.pct OVER all documents
Threshold: IS ABOVE 0.5
Vulnerability Mitigated: Malicious software or programs using a high amount of resources.
Reliability: This alert is highly reliable. This alert can also be used to address CPU usage concerns.
TODO Note: Explain at least 3 alerts. Add more if time allows.
Suggestions for Going Further (Optional)
TODO:
- Each alert above pertains to a specific vulnerability/exploit. Recall that alerts only detect malicious behavior, but do not stop it. For each vulnerability/exploit identified by the alerts above, suggest a patch. E.g., implementing a blocklist is an effective tactic against brute-force attacks. It is not necessary to explain how to implement each patch.
The logs and alerts generated during the assessment suggest that this network is susceptible to several active threats, identified by the alerts above. In addition to watching for occurrences of such threats, the network should be hardened against them. The Blue Team suggests that IT implement the fixes below to protect the network:
**Excessive HTTP Errors**
- Patch: WordPress Hardening
    - Implement regular updates to WordPress 
        - WordPress Core 
        - PHP version
        - Plugins
    - Install security plugin(s)
        - Ex. Wordfence (adds security functionality)
    - Disable unused WordPress features and settings like:
        - WordPress XML-RPC (on by default)
        - WordPress REST API (on by default)
    - Block requests to /?author=<number> by configuring web server settings
    - Remove WordPress logins from being publicly accessible specifically:
        - /wp-admin 
        - /wp-login.php
- Why It Works: 
    - Regular updates to WordPress, the PHP version and plugins is an easy way to implement patches or fixes to exploits/vulnerabilities.
    - Depending on the WordPress security plugin it can provide things like:
        - Malware scans
        - Firewall
        - IP options (to monitor/block suspicious traffic)
    - REST API is used by WPScan to enumerate users
        - Disabling it will help mitigate WPScan or enumeration in general
    - XML-RPC uses HTTP as it’s method of data transport
    - WordPress links (permalinks) can include authors (users)
        - Blocking request to view the all authors (users) helps mitigate against user enumeration attacks
    - Removal of public access to WordPress login helps reduce the attack surface

**HTTP Request Size Monitor**
- Patch: Code Injection/DDOS Hardening
    - Implementation of HTTP Request Limit on the web server
        - Limits can include a number of things:
            - Maximum URL Length
            - Maximum length of a query string
            - Maximum size of a request
    - Implementation of input validation on forms
- Why It Works: 
    - If an HTTP request URL length, query string and over size limit of the request a 404 range of errors will occur.
        - This will help reject these requests that are too large.
    - Input validation can help protect against malicious data anyone attempts to send to the server via the website or application in/across a HTTP request.

**CPU Usage Monitor**
- Patch: Virus or Malware hardening
    - Add or update to a good antivirus.
    - Implement and configure Host Based Intrusion Detection System (HIDS)
        - Ex. SNORT (HIDS)
- Why It Works: 
    - Antiviruses specialize in removal, detection and overall prevention of malicious threats against computers. 
        - Any modern antivirus usually covers more than viruses and are a robust solution to protecting a computer in general.
    - HIDS monitors and analyzes internals of computing systems. 
        - They also monitor and analyze network packets.

